#!/bin/bash
# coded by R0X4R
# Contributers: KathanP19 (https://github.com/KathanP19), f8al (https://github.com/f8al), theamanrawat (https://github.com/theamanrawat), remonsec (https://github.com/remonsec).

wget -q --spider http://google.com
if [ $? -ne 0 ];then
    echo "Connect to internet before running this tool!"
    exit 1
fi

domain=
file=
excl=
thrds=
bxssServer=

load_colors() {
    RED="\e[31m"
    BOLD="\e[1m"
    NORMAL="\e[0m"
    GREEN="\e[92m"
    YELLOW="\e[93m"
    BLINK="\e[5m"
}

usage() {
    load_colors
    echo -e "${RED}\n █▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "${RED} █▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\n coded by ${GREEN}R0X4R${NORMAL}${BOLD} in INDIA with ${RED}<3"
    echo -e "${NORMAL}${BOLD}\n Usage: ${NORMAL}-d\t ${BOLD}target you want to scan (${YELLOW}target.com${NORMAL})"
    echo -e "${NORMAL}${BOLD} Usage: ${NORMAL}-f\t ${BOLD}output directory where you want to save file (${YELLOW}~/target-output/${NORMAL})"
    echo -e "${NORMAL}${BOLD} Usage: ${NORMAL}-t\t ${BOLD}Add threads to get results more faster (${YELLOW}default=100${NORMAL})"
    echo -e "${NORMAL}${BOLD} Usage: ${NORMAL}-b\t ${BOLD}Add your xss server for Blind XSS (${YELLOW}-b test.xss.ht${NORMAL})"
    echo -e "${NORMAL}${BOLD} Usage: ${NORMAL}-x\t ${BOLD}Exclude out of scope domains (${YELLOW}~/out-domains.txt${NORMAL})"
    echo -e "${NORMAL}${BOLD} garud ${GREEN}-d${NORMAL} target.com ${GREEN}-f${NORMAL} target-output \n"
    exit 1
}

while getopts ":b:d:f:h:t:x:" o; do
    case "${o}" in
        b)
            bxssServer=${OPTARG} ;;

        d)
            domain=${OPTARG} ;;

        f)
            file=${OPTARG} ;;

        h)
            usage ;;

        t)
            thrds=${OPTARG} ;;

        x)
            excl=${OPTARG} ;;

        *)
            usage ;;

    esac
done

if [ -z "$domain" ]
  then
    load_colors
    echo -e "${RED}\n █▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "${RED} █▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\n coded by ${GREEN}R0X4R${NORMAL}${BOLD} in INDIA with ${RED}<3"
    echo -e "${NORMAL}${BOLD}${RED}${BLINK}\n ● Error target not supplied. ${NORMAL}"
    echo -e "${NORMAL}${BOLD}\n Usage: ${NORMAL}-d\t ${BOLD}target you want to scan (${YELLOW}target.com${NORMAL})"
    echo -e "${NORMAL}${BOLD} Usage: ${NORMAL}-f\t ${BOLD}output directory where you want to save file (${YELLOW}~/target-output/${NORMAL})"
    echo -e "${NORMAL}${BOLD} garud ${GREEN}-d${NORMAL} target.com ${GREEN}-f${NORMAL} target-output \n"
    exit 1
fi

if [ -z "$file" ]
  then
    load_colors
    echo -e "${RED}\n █▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "${RED} █▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\n coded by ${GREEN}R0X4R${NORMAL}${BOLD} in INDIA with ${RED}<3"
    echo -e "${NORMAL}${BOLD}${RED}${BLINK}\n ● Error output directory not supplied. ${NORMAL}"
    echo -e "${NORMAL}${BOLD}\n Usage: ${NORMAL}-d\t ${BOLD}target you want to scan (${YELLOW}target.com${NORMAL})"
    echo -e "${NORMAL}${BOLD} Usage: ${NORMAL}-f\t ${BOLD}output directory where you want to save file (${YELLOW}~/target-output/${NORMAL})"
    echo -e "${NORMAL}${BOLD} garud ${GREEN}-d${NORMAL} target.com ${GREEN}-f${NORMAL} target-output \n"
    exit 1
fi

if [ -z "$thrds" ]
    then
    thrds=100
fi

if [ ! -d "$file" ]; then
    mkdir $file
fi

cd $file/

show_logo() {
	clear

    echo -e ${GREEN}"""\n	
          .                                                      .
        .n                   .                 .                  n.
  .   .dP                  dP                   9b                 9b.    .
 4    qXb         .       dX                     Xb       .        dXp     t
dX.    9Xb      .dXb    __                         __    dXb.     dXP     .Xb
9XXb._       _.dXXXXb dXXXXbo.                 .odXXXXb dXXXXb._       _.dXXP
 9XXXXXXXXXXXXXXXXXXXVXXXXXXXXOo.           .oOXXXXXXXXVXXXXXXXXXXXXXXXXXXXP
  v9XXXXXXXXXXXXXXXXXXXXXi-   -vOOO8b   d8OOOi-   -vXXXXXXXXXXXXXXXXXXXXXPi
    v9XXXXXXXXXXXPi v9XXi   DIE    v98v8Pi  HUMAN   vXXPi v9XXXXXXXXXXXPi
        -------       9X.          .db|db.          .XP       -------
                        )b.  .dbo.dPivviv9b.odb.  .dX(
                      ,dXXXXXXXXXXXb     dXXXXXXXXXXXb.
                     dXXXXXXXXXXXPi   .   v9XXXXXXXXXXXb
                    dXXXXXXXXXXXXb   d|b   dXXXXXXXXXXXXb
                    9XXbi   vXXXXXb.dX|Xb.dXXXXXi   vdXXP
                     vi      9XXXXXX(   )XXXXXXP      vi
                              XXXX X.vvi.X XXXX
                              XP^Xivb   divX^XX
                              X. 9  v   i  P )X
                              vb  v       i  di
                               v             i """

    echo -e "${RED}\n                             █▀▀ ▄▀█ █▀█ █░█ █▀▄"
    echo -e "${RED}                             █▄█ █▀█ █▀▄ █▄█ █▄▀"
    echo -e "${NORMAL}${BOLD}\n                        coded by ${GREEN}R0X4R${NORMAL}${BOLD} in INDIA with ${RED}<3"
    sleep 1
}

scan_targets() {
    echo -e "${NORMAL}${BOLD}\n\n Target: ${RED}$domain${NORMAL}"
    echo -e "${NORMAL}${BOLD} Output: ${GREEN}$(pwd)${NORMAL}"
    echo -e "${NORMAL}${BOLD} Threads: ${GREEN}$thrds${NORMAL}"
}

run_subenum() {
    echo -ne "${NORMAL}${BOLD}${YELLOW}\n ● Scanning is in progress:${NORMAL}${BOLD} Scanning subdomains of $domain [${GREEN}${BLINK}20%${NORMAL}] \r"
    assetfinder --subs-only $domain | sort -u > $file-assetfinder.txt
    python3 ~/tools/Sublist3r/sublist3r.py -d $domain -o $file-sublister.txt &> /dev/null
    subfinder -silent -d $domain -t $thrds -o $file-subfinder.txt > /dev/null
    amass enum -passive -norecursive -noalts -d $domain -o $file-amass.txt &> /dev/null
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Filtering subdomains of $domain [${GREEN}${BLINK}30%${NORMAL}] \r"
    sleep 1s
    if [ -f "$excl" ]
        then
            cat $file-sublister.txt $file-assetfinder.txt $file-subfinder.txt $file-amass.txt | grep -v "*" | grep -vf $excl | sort -u | sed '/@/d' | sed '/<BR>/d' | sed '/\_/d'| sed '/*/d' | dnsx -t 100 -silent > $file-finalsubdomains.txt
        else
            cat $file-sublister.txt $file-assetfinder.txt $file-subfinder.txt $file-amass.txt | grep -v "*" | sort -u | sed '/@/d' | sed '/<BR>/d' | sed '/\_/d'| sed '/*/d' | dnsx -t 100 -silent > $file-finalsubdomains.txt
    fi
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Filtering valid subdomains of $domain [${GREEN}${BLINK}35%${NORMAL}] \r"
    sleep 1s
    cat $file-finalsubdomains.txt | sort -u | uniq -u | httpx -threads $thrds -tls-probe -csp-probe -silent > $file-alive.txt
    cat $file-alive.txt | sed -E 's/^\s*.*:\/\///g' > $file-alwpr.txt

}

run_gettitle() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Getting titles of valid subdomains of $domain [${GREEN}${BLINK}40%${NORMAL}] \r"
    cat $file-alive.txt | httpx -threads $thrds -status-code -title -silent > $file-title.txt
    cat $file-alive.txt | aquatone -chrome-path /snap/bin/chromium -out $file-aqua_out/ -threads 5 -silent &> /dev/null
}

run_params() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Getting all parameters of $domain [${GREEN}${BLINK}70%${NORMAL}] \r"
    cat $file-alive.txt | gauplus --random-agent -b png,jpg,svg,gif -t $thrds -o gau-urls.txt
    cat gau-urls.txt | urldedupe -s > $file-params.txt
    rm gau-urls.txt
}

run_gf() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Filtering all parameters of $domain [${GREEN}${BLINK}75%${NORMAL}] \r"
    mkdir patterns/ &> /dev/null
    cat $file-params.txt | gf xss | sed 's/=.*/=/' | sed 's/URL: //' > patterns/$file-xss.txt
    cat $file-params.txt | gf ssrf > patterns/$file-ssrf.txt
    cat $file-params.txt | gf ssti > patterns/$file-ssti.txt
    cat $file-params.txt | gf redirect > patterns/$file-redirect.txt
    cat $file-params.txt | gf sqli > patterns/$file-sqli.txt
    cat $file-params.txt | gf lfi > patterns/$file-lfi.txt
    cat $file-params.txt | gf rce > patterns/$file-rce.txt
}

check_xss() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Checking for xss in $domain [${GREEN}${BLINK}85%${NORMAL}] \r"
    mkdir vulnerabilities/ &> /dev/null
    cat patterns/$file-xss.txt | kxss 2> /dev/null | tee vulnerabilities/$file-xss.txt &> /dev/null
    if [ -n "$bxssServer" ]
        then
            dalfox file $file-params.txt pipe --silence --no-color --no-spinner --mass --mass-worker 100 --multicast --skip-bav -w $thrds -b $bxssServer 2> /dev/null | anew -q vulnerabilities/$file-dalfox.txt &> /dev/null
        else
            dalfox file $file-params.txt pipe --silence --no-color --no-spinner --mass --mass-worker 100 --multicast --skip-bav -w $thrds 2> /dev/null | anew -q vulnerabilities/$file-dalfox.txt &> /dev/null
    fi
}

check_crlf() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Checking for crlf in $domain [${GREEN}${BLINK}86%${NORMAL}] \r"
    crlfuzz -l $file-alive.txt -c $thrds -s | anew vulnerabilities/$file-crlf.txt | notify -silent &> /dev/null
}

check_mail() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Checking for email spoofing errors in $domain [${GREEN}${BLINK}87%${NORMAL}] \r"
    for target in $(echo "$domain"); do if [[ $(curl --connect-timeout 3 -kls --max-time 3 -d "serial=fred12&domain=${target}" -H "Content-Type: application/x-www-form-urlencoded" -X POST "https://www.kitterman.com/spf/getspf3.py") =~ 'SPF record passed validation test with pySPF' ]]; then echo -e "VULNERABLE: ${target}"; else echo -e "NOT VULNERABLE: ${target}"; fi done | tee vulnerabilities/$file-spf.txt | notify -silent &> /dev/null
    for target in $(echo "$domain"); do if [[ $(curl --connect-timeout 3 -kls --max-time 3 -X GET "https://dmarcly.com/server/dmarc_check.php?domain=${target}") =~ 'success' ]]; then echo -e "VULNERABLE: ${target}"; else echo -e "NOT VULNERABLE: ${target}"; fi done | tee vulnerabilities/$file-email.txt | notify -silent &> /dev/null
}

check_ssti() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Checking for ssti vulnerabilities in $domain [${GREEN}${BLINK}88%${NORMAL}] \r"
    cat ~/ssti-payloads.txt | while read -r line; do cat patterns/$file-ssti.txt | qsreplace "$line" | anew -q ssticheck.txt;done
    cat ssticheck.txt | xargs -P 100 -I host bash -c "curl -s -L 'host' | grep \"check-ssti49\" && echo -e \"[VULNERABLE] - host \n \"" | grep "VULNERABLE" | anew vulnerabilities/$file-ssti-vulns.txt | notify -silent &> /dev/null
    rm ssticheck.txt
}

check_lfi() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Checking for lfi vulnerabilities in $domain [${GREEN}${BLINK}89%${NORMAL}] \r"
    cat ~/lfi-payloads.txt | while read -r line; do cat patterns/$file-lfi.txt | qsreplace "$line" | anew -q lficheck.txt;done
    cat lficheck.txt | xargs -P 100 -I host bash -c "curl -s -L 'host' | grep \"root:\" && echo -e \"[VULNERABLE] - host \n \"" | grep "VULNERABLE" | anew vulnerabilities/$file-lfi-vulns.txt | notify -silent &> /dev/null
    rm lficheck.txt
}

check_nuclei() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Scanning for vulnerabilities of $domain using nuclei [${GREEN}${BLINK}90%${NORMAL}] \r"
    cat $file-alive.txt | while read -r line;do nuclei -t ~/nuclei-templates/ -target $line -severity low,medium,high,critical -bs 100 -c 200 -rl 300 -nc -silent;done | tee vulnerabilities/$file-nuclei.txt | notify -silent &> /dev/null
}

check_sqli() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Scanning for sqli vulnerabilities of $domain using sqlmap [${GREEN}${BLINK}92%${NORMAL}] \r"
    cat patterns/$file-sqli.txt | qsreplace "FUZZ" | anew -q sqlicheck.txt
    cat sqlicheck.txt | xargs -P 30 -I X bash -c "python3 ~/tools/sqlmap.py -u X -b --batch --disable-coloring --random-agent --risk 3 --level 5 --output-dir=vulnerabilities/sqlmap_output 2> /dev/null" &> /dev/null
    rm sqlicheck.txt
}

check_infoleak() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Scanning for directories and sensitive files of $domain using dirsearch [${GREEN}${BLINK}94%${NORMAL}] \r"
    python3 ~/tools/dirsearch/dirsearch.py -w ~/wordlists/big.txt -l $file-alive.txt -x 204,301,302,401,500,502,503,429 -e html,json,php,asp,aspx,log,sql,txt,asp,jsp,bak -r -R 40 --exclude-texts "403 Forbidden", "Log in to" --full-url -q --plain-text-report vulnerabilities/$file-dir.txt 2> /dev/null | notify -silent &> /dev/null
}

check_smuggle() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Scanning for smuggling vulnerabilities of $domain using smuggler [${GREEN}${BLINK}96%${NORMAL}] \r"
    cat $file-alive.txt | while read -r line; do echo $line;done | xargs -P 100 -I X bash -c "python3 ~/tools/smuggler/smuggler.py -u 'X' --quite" &> /dev/null
}

check_open() {
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Checking for open redirection in $domain [${GREEN}${BLINK}97%${NORMAL}] \r"
    cat patterns/$file-redirect.txt | qsreplace "FUZZ" | anew redirect-open.txt &> /dev/null
    python3 ~/tools/OpenRedireX/openredirex.py -l redirect-open.txt --keyword FUZZ -p ~/tools/OpenRedireX/payloads.txt | grep "^http" | anew vulnerabilities/redirect.txt | notify -silent &> /dev/null
    sed -r -i "s/\x1B\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g" vulnerabilities/redirect.txt &> /dev/null
    cat patterns/$file-redirect.txt | grep -a -i \=http | qsreplace 'http://www.evil.com/' | while read host do; do curl -s -L $host -I | grep "evil.com" && echo -e "[VULNERABLE] - $host \n "; done | tee $file-vulnred.txt | notify -silent &> /dev/null # this oneliner I got from Hacktify's youtube channel. Video Link: https://youtu.be/Va_TvyBjtKA
    rm redirect-open.txt
    sleep 1s
    echo -ne "${NORMAL}${BOLD}${YELLOW} ● Scanning is in progress:${NORMAL}${BOLD} Setting things up for $domain [${GREEN}${BLINK}100%${NORMAL}] \r"
    sleep 1s
    echo -ne "\n"
    echo -e "${NORMAL}${BOLD} ● Scanning Completed. Thanks for using Garud."
}

slack_bot() {
    sleep 3s
    echo -e "${NORMAL}${BOLD}${YELLOW}\n ● Sending notification to your slack.\n"
    echo -e "$(cat $file-finalsubdomains.txt | wc -l) subdomains found of $domain" | notify -silent &> /dev/null
    echo -e "$(cat $file-alive.txt | wc -l) active urls found of $domain" | notify -silent &> /dev/null
    echo -e "$(cat vulnerabilities/* | wc -l) vulnerabilities found of $domain" | notify -silent &> /dev/null
    cat vulnerabilities/$file-dalfox.txt | notify -silent &> /dev/null
    function notification_text() {
        echo -e "Hii $(whoami),\nRecon completed for $domain.\nAll your outputs are saved in $(pwd).\n Thanks for using Garud";
    }
    python3 ~/slack-bot.py "$(notification_text)."
}

run_scans() {
    scan_targets
    run_subenum
    run_gettitle
    run_params
    run_gf
    check_xss
    check_crlf
    check_mail
    check_ssti
    check_lfi
    check_nuclei
    check_sqli
    check_infoleak
    check_open
    slack_bot
    exit 1
}

while true
do
    load_colors
    show_logo
    run_scans
done
